package lab;

import java.util.LinkedList;

public class Labirinto {

	private static Labirinto instance = new Labirinto();
	private LinkedList<LinkedList<Posicao>> labirinto = new LinkedList<LinkedList<Posicao>>();

	private Rato rato;
	private int numeroDeLinhas;
	private int numeroDeColunas;
	private int ratoLinha;
	private int ratoColuna;
	private int colunaAnterior;
	private int linhaAnterior;

	public Labirinto() {
		this.linhaAnterior = -1;
		this.colunaAnterior = -1;
	}

	public Posicao getPosicao(int linha, int colula){
		return labirinto.get(linha).get(colula);
	}
	
	public int getColunaAnterior() {
		return colunaAnterior;
	}

	public void setColunaAnterior(int colunaAnterior) {
		this.colunaAnterior = colunaAnterior;
	}

	public int getLinhaAnterior() {
		return linhaAnterior;
	}

	public void setLinhaAnterior(int linhaAnterior) {
		this.linhaAnterior = linhaAnterior;
	}

	public Rato getRato() {
		return rato;
	}

	public void setRato(Rato rato) {
		this.rato = rato;
	}

	public int getRatoLinha() {
		return ratoLinha;
	}

	public void setRatoLinha(int ratoLinha) {
		this.ratoLinha = ratoLinha;
	}

	public int getRatoColuna() {
		return ratoColuna;
	}

	public void setRatoColuna(int ratoColuna) {
		this.ratoColuna = ratoColuna;
	}

	private boolean terminou;


	public static Labirinto getInstance() {

		return instance;
	}

	public int getNumeroDeLinhas() {

		return numeroDeLinhas;
	}

	public void setNumeroDeLinhas(int numeroDeLinhas) {
		this.numeroDeLinhas = numeroDeLinhas;
	}

	public int getNumeroDeColunas() {
		return numeroDeColunas;
	}

	public void setNumeroDeColunas(int numeroDeColunas) {
		this.numeroDeColunas = numeroDeColunas;
	}


	private void setTerminou(boolean b) {
		this.terminou = b;

	}

	public boolean terminou() {
		return terminou;
	}

	public String toString() {
		int linhaAtual = 0;
		this.sleep(1000);
		StringBuffer linhas = new StringBuffer();

		linhas.append("\n");

		for (LinkedList<Posicao> linha : labirinto) {
			int colunaAtual = 0;
			for (Posicao posicaolinha : linha) {
				try {
					String caracter = posicaolinha.getCaracter();
					
					if (this.ratoLinha == linhaAtual
							&& this.ratoColuna == colunaAtual) {
						caracter = Rato.CARACTER;
						
					}
					linhas.append(caracter);
				} catch (Exception e) {
					linhas.append("[LABIRINTO] erro impressao");

				}
				colunaAtual++;
			}
			linhas.append("\n");
			linhaAtual++;

		}
		return linhas.toString();

	}

	public void add(LinkedList<Posicao> listaElemento) {
		labirinto.add(listaElemento);

	}

	public static void sleep(int m) {
		try {
			Thread.sleep(m);
		} catch (InterruptedException ex) {
			Thread.currentThread().interrupt();
		}
	}

}
